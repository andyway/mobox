{
  "name": "mongoose-acl",
  "version": "0.2.1",
  "description": "Mongoose ACL",
  "homepage": "http://github.com/scttnlsn/mongoose-acl",
  "author": {
    "name": "Scott Nelson",
    "email": "scott@scttnlsn.com"
  },
  "contributors": [
    {
      "name": "Joshua Gross",
      "email": "josh@spandex.io"
    }
  ],
  "main": "./lib/index",
  "scripts": {
    "test": "./node_modules/.bin/mocha"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/scttnlsn/mongoose-acl.git"
  },
  "dependencies": {},
  "devDependencies": {
    "mocha": ">= 1.4.1",
    "mongoose": ">= 3.1.0",
    "sinon": ">= 1.4.2"
  },
  "readme": "mongoose-acl\n===\n\nUsage\n---\n\n```javascript\nvar mongoose = require('mongoose');\nvar acl = require('mongoose-acl');\n\nvar WidgetSchema = new mongoose.Schema({ … });\nWidgetSchema.plugin(acl.object);\n\nvar UserSchema = new mongoose.Schema({ … });\nUserSchema.plugin(acl.subject);\n```\n    \nMethods\n---\nThe plugin adds accessor methods to the object for getting and setting permissions of a particular key:\n\n```javascript\nvar widget = new Widget({ … });\n\nwidget.setAccess('foo', ['a', 'b']);\nwidget.getAccess('foo'); // => ['a', 'b']\n```\n\nOr getting all keys with given permissions:\n\n```javascript\nwidget.keysWithAccess(['a']); // => ['foo']\n```\n    \nThere are also convenience methods added to the subject for getting and setting the permissions for a given object:\n\n```javascript\nvar user = …;\n\nuser.setAccess(widget, ['read', 'write', 'delete']);\nuser.getAccess(widget); // => ['read', 'write', 'delete']\n```\n    \nWe can query for all objects to which a particular subject has access:\n\n```javascript\nWidget.withAccess(user, ['read']).exec(function(err, widgets) {\n    ...\n});\n```\n    \nOptions\n---\n\n### Object\n\nWe can specify the path in which the ACL will be stored (by default it will be available at `_acl`):\n\n```javascript\nWidgetSchema.plugin(acl.object, {\n    path: '_acl'\n});\n```\n    \n### Subject\n\nEach subject is referred to in an ACL by a unique key (by default it is of the form `subject:<subject _id>`).  This can be customized by specifying a `key` option:\n\n```javascript\nUserSchema.plugin(acl.subject, {\n    key: function() {\n        return 'user:' + this._id;\n    }\n});\n```\n    \nWe can also specify additional ACL keys to which a subject has access.  For example, suppose a user optionally belongs to a number of roles:\n\n```javascript\nUserSchema.plugin(acl.subject, {\n    additionalKeys: function() {\n        return this.roles.map(function(role) {\n            return 'role:' + role;\n        });\n    }\n});\n```\n    \nThere is one special key referred to as the public key.  If set, the associated permissions will apply to all subjects:\n\n```javascript\nUserSchema.plugin(acl.subject, {\n    public: '*'\n});\n```\n\nInstall\n---\n\n    npm install mongoose-acl\n    \nTests\n---\n\n    npm test",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/scttnlsn/mongoose-acl/issues"
  },
  "_id": "mongoose-acl@0.2.1",
  "dist": {
    "shasum": "d18321fbdca425dadfc0f06b4f9b8b6fb3781fa1"
  },
  "_from": "mongoose-acl@latest",
  "_resolved": "https://registry.npmjs.org/mongoose-acl/-/mongoose-acl-0.2.1.tgz"
}
